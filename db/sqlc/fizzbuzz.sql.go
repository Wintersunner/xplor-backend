// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: fizzbuzz.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createFizzBuzz = `-- name: CreateFizzBuzz :execresult
INSERT INTO fizzbuzz (useragent, message, created_at)
VALUES (?, ?, ?)
`

type CreateFizzBuzzParams struct {
	Useragent string    `json:"useragent"`
	Message   string    `json:"message"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) CreateFizzBuzz(ctx context.Context, arg CreateFizzBuzzParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createFizzBuzz, arg.Useragent, arg.Message, arg.CreatedAt)
}

const getFizzBuzz = `-- name: GetFizzBuzz :one
SELECT id, useragent, message, created_at
FROM fizzbuzz
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetFizzBuzz(ctx context.Context, id int64) (Fizzbuzz, error) {
	row := q.db.QueryRowContext(ctx, getFizzBuzz, id)
	var i Fizzbuzz
	err := row.Scan(
		&i.ID,
		&i.Useragent,
		&i.Message,
		&i.CreatedAt,
	)
	return i, err
}

const listFizzBuzzes = `-- name: ListFizzBuzzes :many
SELECT id, useragent, message, created_at
FROM fizzbuzz
ORDER BY id DESC
`

func (q *Queries) ListFizzBuzzes(ctx context.Context) ([]Fizzbuzz, error) {
	rows, err := q.db.QueryContext(ctx, listFizzBuzzes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Fizzbuzz{}
	for rows.Next() {
		var i Fizzbuzz
		if err := rows.Scan(
			&i.ID,
			&i.Useragent,
			&i.Message,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
